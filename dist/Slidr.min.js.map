{"version":3,"sources":["../../src/Slide.ts","../../src/Slidr.ts","index.js"],"names":["window","Slidr","require"],"mappings":"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","file":"Slidr.min.js","sourceRoot":"..","sourcesContent":["export type SlideProps = {\n    name: string\n    timeout: number\n    shown?: Function\n    beforeEnter?: Function\n    beforeLeave?: Function\n}\n\n/**\n * @property {SlideProps} _properties\n * @property {number} _index\n */\nexport default class Slide {\n\n    public element: HTMLElement|null;\n    private _properties: SlideProps;\n    private _index: number;\n    private _active: Boolean;\n\n    /**\n     * @returns {String}\n     */\n    public get name(): string {\n        return this._properties.name\n    }\n\n    /**\n     * @returns {number}\n     */\n    public get timeout(): number {\n        return this._properties.timeout\n    }\n\n    /**\n     * @returns {String}\n     */\n    public get selector(): string {\n        return `[data-slide=\"${this._properties.name}\"]`\n    }\n\n    /**\n     * @returns {SlideProps}\n     */\n    public static get DEFAULT_SLIDE_PROPS(): SlideProps {\n        return {\n            name: '',\n            timeout: 0,\n            shown: _ => {},\n            beforeEnter: _ => {},\n            beforeLeave: _ => {}\n        }\n    }\n\n    /**\n     * @returns {number}\n     */\n    public get index(): number {\n        return this._index\n    }\n\n    /**\n     * @params {number}\n     */\n    public set index(index: number) {\n        this._index = index\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    public get active(): Boolean {\n        return this._active\n    }\n\n    /**\n     * @params {Boolean}\n     */\n    public set active(active: Boolean) {\n        this._active = active\n        this.element.classList.toggle('active')\n    }\n\n    /**\n     * @param {SlideProps} properties\n     */\n    constructor(properties: SlideProps) {\n        if (!properties.name || !properties.name.length)\n            throw new Error('[Err] Slide.constructor :: property \"name\" is required')\n\n        this._properties = {\n            ...Slide.DEFAULT_SLIDE_PROPS,\n            ...properties\n        };\n\n        this.element = document.querySelector(this.selector)\n\n        if (this.element === null)\n            throw new Error(`[Err] Slide.constructor :: DOM element '${this.selector}' does not exists`)\n\n        this._index = null\n        this._active = false\n    }\n\n    /**\n     * @param {String} event_name\n     * @returns {Function}\n     */\n    public dispatchEvent(event_name: string): Function {\n        return this._properties[event_name].call(this)\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    public isActive(): Boolean {\n        return this._active === true\n    }\n}\n","import Slide from \"./Slide\";\nimport SlideProps from \"./Slide\";\n\ndeclare global {\n    interface Window {\n        Slidr:any;\n    }\n}\n\ntype SliderOptions = {\n    loops?: Number\n    animate?: Boolean\n    animation_class?: string\n    enter_class?: string\n    container?: string\n}\n\n/**\n * @class\n * @property {SliderOptions} options\n * @property {SlideProps[]} slides\n * @property {Number} index\n * @property {Number} loops\n * @property {[String]: Function} _events\n */\nexport default class Slidr {\n\n    public options: SliderOptions\n    public slides: Slide[]\n    public index: number\n    public loops: number\n    public _events: Object\n\n    /**\n     * @returns {SliderOptions}\n     */\n    public static get DEFAULT_OPTIONS(): SliderOptions {\n        return {\n            loops: Infinity,\n            animate: true,\n            animation_class: 'fade',\n            enter_class: 'fade-in'\n        }\n    }\n\n    /**\n     * @returns {Slide}\n     */\n    public get current_slide(): Slide {\n        return this.slides[this.index]\n    }\n\n    /**\n     * @constructor\n     * @param {SliderOptions} options\n     */\n    constructor(options: SliderOptions = {}) {\n        this.options = <SliderOptions> {\n            ...Slidr.DEFAULT_OPTIONS,\n            ...options\n        }\n        this.slides = []\n        this.index = 0\n        this.loops = 0\n        this._events = {\n            'beforeEnter': () => {},\n            'beforeLeave': () => {},\n            'loopend': () => {},\n            'change': () => {}\n        }\n\n        if (this.options.container && this.options.container.length)\n            this._buildFromHTML()\n    }\n\n    /**\n     * @returns {Slidr}\n     */\n    public add(slide_props: SlideProps): Slidr {\n        const slide = new Slide(slide_props)\n        slide.index = this.slides.push(slide)\n\n        if (this.options.animate)\n            document\n                .querySelector(slide.selector)\n                .classList.add(this.options.animation_class)\n\n        return this\n    }\n\n    /**\n     * @returns {Slidr}\n     */\n    public run(): Slidr {\n        if (this.index >= this.slides.length) {\n            this.index = 0\n            this.loops++\n            if (this.loops === this.options.loops) {\n                this._dispatchEvent('loopend')\n                return this\n            }\n        }\n\n        this.current_slide.active = true\n        this._dispatchEvent('change')\n\n        try {\n            this._slide()\n        } catch (e) {\n            throw e\n        }\n\n        return this\n    }\n\n    /**\n     * @param {Number} index\n     * @returns {Slide|null}\n     */\n    public getSlideByIndex(index: number): Slide {\n        return this.slides[index] || null\n    }\n\n    /**\n     * @param {String} name\n     * @returns {Slide|null}\n     */\n    public getSlideByName(name: String): (Slide|null) {\n        return this.slides.find(slide => slide.name === name) || null\n    }\n\n    /**\n     *\n     * @param {String} event_name\n     * @param {Function} callback\n     * @returns {Slidr}\n     */\n    public listen(event_name: string, callback: Function): Slidr {\n        if (!Object.keys(this._events).includes(event_name))\n            throw new Error(`[Err] Slidr.listen :: Event '${event_name}' does not exists.`)\n\n        this._events[event_name] = callback\n\n        return this\n    }\n\n    /**\n     * @throws {Error}\n     * @private\n     */\n    private _slide(): void {\n        if (!this.current_slide)\n            throw new Error('[Err] Slidr._slide :: no slide found at index ' + this.index)\n\n        this._dispatchEvent('beforeEnter')\n        this.current_slide.dispatchEvent('beforeEnter')\n\n        document\n                .querySelectorAll(`[data-slide]:not(${this.current_slide.selector})`)\n                .forEach(el => el.classList.remove(this.options.enter_class))\n\n        window.setTimeout((): void => {\n            document.querySelector(this.current_slide.selector).classList.add(this.options.enter_class)\n\n            this.current_slide.dispatchEvent('shown')\n\n            window.setTimeout(() => {\n                this._dispatchEvent('beforeLeave')\n                this.current_slide.dispatchEvent('beforeLeave')\n                this.current_slide.active = false\n                this.index++\n                this.run()\n            }, this.current_slide.timeout)\n        }, this.options.animate ? 350 : 0)\n    }\n\n    /**\n     * @private\n     */\n    private _buildFromHTML(): void {\n        const slides = document.querySelectorAll(this.options.container + ' [data-slide]')\n        if (!slides)\n            throw new Error(`[Err] Slidr._buildFromHTML :: No slides found on container element '${this.options.container}'`)\n\n        slides.forEach(({dataset}: HTMLElement) => {\n            if (dataset.slide &&dataset.slide.length) {\n                this.add({\n                    name: dataset.slide,\n                    timeout: dataset.timeout ? parseInt(dataset.timeout, 10) : 0\n                } as SlideProps)\n            }\n        })\n    }\n\n    /**\n     * @param {String} event_name\n     * @private\n     */\n    private _dispatchEvent(event_name: string): void {\n        this._events[event_name].call(this)\n    }\n\n}\n\nif (!window.hasOwnProperty('Slidr'))\n    window.Slidr = Slidr","window.Slidr = require('./build/main/Slidr')\n"]}